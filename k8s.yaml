# TODO:
# container/with builder tools
# container/pod with websockify
# cronjob for refreshing certs

# Setup guide
#
# Kubernetes Ingress takes care of routing HTTP (redirect to HTTPS), HTTPS (serves webclient), Websockets (carries MUDdy traffic) and Letsencrypt challenges.
# To set up ingress, you need 1) a pod with ingress controller (that's an instance of nginx), 2) configuration here in this file.
#
# From https://docs.microsoft.com/en-us/azure/aks/ingress-tls
# 1. Create a static IP - the resource group is important, it determines the scope the Service will search it in.
# az network public-ip create --resource-group rg-sneezy --name mc_rg-sneezy_aks-sneezy_westus --sku Standard --allocation-method static --query publicIp.ipAddress -o tsv
# 2. Set up a DNS record for your IP. Wait until it goes live (it might take a while, depending on DNS server).
# 3. Set up ingress controller:
#    kubectl create namespace sneezy-test
#    helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
#    helm install nginx-ingress ingress-nginx/ingress-nginx --namespace sneezy-test --set controller.replicaCount=2 --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux --set controller.service.loadBalancerIP="PUT YOUR STATIC IP HERE"
# 4. Add components to generate a TLS cert: https://cert-manager.io/docs/installation/kubernetes/
#    kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.1.0/cert-manager.yaml
#    XXX: If you get error that something-or-other about validator is not reachable, then: kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission
# 5. Now set up Sneezy, webclient, and all the stuff, then wait a bit until the TLS cert gets generated:
#    (depending on test/prod, change the FQDNs in ingress controller):
#    kubectl -n sneezy-test apply -f k8s.yaml

apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: elmo_sneezymud-letsencrypt@todurov.eu
    privateKeySecretRef:
      name: letsencrypt
    solvers:
    - http01:
        ingress:
          class: nginx
          podTemplate:
            spec:
              nodeSelector:
                "kubernetes.io/os": linux

---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: sneezy-web-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/use-regex: "true"
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  tls:
  - hosts:
    - test.sneezymud.org
    secretName: tls-secret
  rules:
  - host: test.sneezymud.org
    http:
      paths:
      - backend:
          serviceName: sneezymud
          servicePort: 7901
        path: /ws
      - backend:
          serviceName: sneezymud
          servicePort: 80
        path: /(static\/.*)
      - backend:
          serviceName: sneezymud
          servicePort: 80

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sneezy-db-disk
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: default
  resources:
    requests:
      storage: 2Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sneezy-files-disk
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: default
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sneezy-backups-disk
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: default
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sneezy-db
spec:
  serviceName: sneezy-db
  replicas: 1
  selector:
    matchLabels:
      app: sneezy-db
  template:
    metadata:
      labels:
        app: sneezy-db
    spec:
      nodeSelector:
        "beta.kubernetes.io/os": linux
      containers:
      - name: sneezy-db
        image: mariadb:10.5
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "111111"
        - name: MYSQL_USER
          value: "sneezy"
        - name: MYSQL_PASSWORD
          value: "password"
        ports:
        - containerPort: 3306
          name: sneezy-db
        volumeMounts:
          - mountPath: /var/lib/mysql
            name: sneezy-db-disk
      volumes:
      - name: sneezy-db-disk
        persistentVolumeClaim:
          claimName: sneezy-db-disk

---
apiVersion: v1
kind: Service
metadata:
  name: sneezy-db
  labels:
    app: sneezy-db
spec:
  ports:
  - port: 3306
    name: mariadb
  selector:
    app: sneezy-db

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sneezymud
spec:
  serviceName: sneezy
  replicas: 1
  selector:
    matchLabels:
      app: sneezymud
  template:
    metadata:
      labels:
        app: sneezymud
    spec:
      nodeSelector:
        "beta.kubernetes.io/os": linux
      initContainers:
      - name: wait-for-db
        image: mariadb:10.5
        command: ['sh', '-c', "until mysql -h sneezy-db -u root --password=111111  < /dev/null ; do echo waiting for db; sleep 2; done"]
      - name: populate-data-and-db
        image: mariadb:10.5
        command:
          - 'sh'
          - '-c'
          - |
            set -ex
            [ -f /home/sneezy/lib/tipsfile ] && exit 0
            apt-get update && apt-get install --yes --no-install-recommends ca-certificates curl
            echo "DROP USER IF EXISTS 'sneezy'@'%';" | mysql -h sneezy-db -u root --password=111111
            echo "FLUSH PRIVILEGES;" | mysql -h sneezy-db -u root --password=111111
            echo "CREATE DATABASE IF NOT EXISTS immortal CHARACTER SET utf8 COLLATE utf8_general_ci;" | mysql -h sneezy-db -u root --password=111111
            echo "CREATE DATABASE IF NOT EXISTS sneezy CHARACTER SET utf8 COLLATE utf8_general_ci;" | mysql -h sneezy-db -u root --password=111111
            echo "CREATE USER 'sneezy'@'%' IDENTIFIED BY 'password';" | mysql -h sneezy-db -u root --password=111111
            echo "GRANT ALL PRIVILEGES ON immortal.* to 'sneezy'@'%';" | mysql -h sneezy-db -u root --password=111111
            echo "GRANT ALL PRIVILEGES ON sneezy.* to 'sneezy'@'%';" | mysql -h sneezy-db -u root --password=111111
            cd /home/sneezy
            curl -L https://sneezymud.org/sneezybackups/latest.tar.xz | tar xvJ
            # Sneezy runs as UID=1000
            chown -R 1000:1000 lib
            mysql -h sneezy-db -u root --password=111111 < dbdump.sql
            rm dbdump.sql
        volumeMounts:
          - mountPath: /home/sneezy/lib
            name: sneezy-files-disk
      containers:
      - name: sneezymud
        image: sneezymud/sneezymud:5
        ports:
        - containerPort: 7900
        resources:
          requests:
            cpu: 250m
          limits:
            cpu: 500m
        volumeMounts:
          - mountPath: /home/sneezy/lib
            name: sneezy-files-disk
      - name: sneezy-webclient
        image: sneezymud/webclient:13
        ports:
        - containerPort: 80
          name: http
      - name: sneezy-websockify
        image: efrecon/websockify
        args:
          - "7901"
          - "sneezymud:7900"
        ports:
        - containerPort: 7901
          name: websocket
      volumes:
      - name: sneezy-files-disk
        persistentVolumeClaim:
          claimName: sneezy-files-disk

---
apiVersion: v1
kind: Service
metadata:
  name: sneezymud
spec:
  type: LoadBalancer
  ports:
  - port: 7900
    protocol: TCP
    name: sneezymud
  - port: 80
    name: http
    protocol: TCP
  - port: 7901
    name: websocket
    protocol: TCP
  selector:
    app: sneezymud


      # ---
      # apiVersion: batch/v1beta1
      # kind: CronJob
      # metadata:
      #   name: sneezy-daily-backup
      # spec:
      #   schedule: "* * */1 * *"
      #   jobTemplate:
      #     spec:
      #       template:
      #         spec:
      #           restartPolicy: OnFailure
      #           volumes:
      #           - name: sneezy-files-disk
      #             persistentVolumeClaim:
      #               claimName: sneezy-files-disk
      #           - name: sneezy-backups-disk
      #             persistentVolumeClaim:
      #               claimName: sneezy-backups-disk
      #           containers:
      #           - name: sneezy-backup
      #             image: busybox
      #             volumeMounts:
      #               - mountPath: /home/sneezy/lib
      #                 name: sneezy-files-disk
      #                 readOnly: true
      #               - mountPath: /sneezybackups
      #                 name: sneezy-backups-disk
      #             args:
      #             - /bin/sh
      #             - -c
      #             - |
      #               set -ex
      # 
      #               # Important locations
      #               TEMPLOCATION="/tmp"
      #               SNEEZYLIB="/home/sneezy"
      #               BACKUPDIR="/sneezybackups"
      # 
      #               # Setting the backup filename
      #               if [ -z "$1" ]
      #               then
      #                       FNAME="$BACKUPDIR/sneezy-backup-`date +%s`.tar.xz"
      #               else
      #                       FNAME="$1"
      #               fi
      # 
      #               # Dump the database (this takes a bit of time)
      #               mysqldump -h sneezy-db -u root -p111111 --databases sneezy immortal > "$TEMPLOCATION/dbdump.sql"
      # 
      #               # Perform the backup
      #               tar -cJf "$FNAME" --exclude='core' -C "$TEMPLOCATION" dbdump.sql -C "$SNEEZYLIB" lib || true  # tends to fail with "file changed" or "file deleted" -- proper LVM snapshotting would be better
      # 
      #               # Remove our temps
      #               rm "$TEMPLOCATION/dbdump.sql"
      # 
      #               # Push the backup to any online repositories.
      #               #drive push -no-prompt -quiet -destination backups "$FNAME"